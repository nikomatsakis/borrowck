struct Vec<+> {
  dummy: 0
}

let foo: ();
let v: Vec<&'v ()>;
let p: &'p ();

block START {
    v = use();      // let v: Vec<&i32> = vec![];
    p = &'foo foo;  // let p = &foo;
    goto B C;
}

block B {
    v.dummy = p; // emulates `vec.push(p)`
    goto EXIT;
}

block C {
    ; // key point: foo not borrowed here
    goto EXIT;
}

block EXIT {
    use(v);
}

assert B/0 in 'foo;
assert B/0 in 'v;
assert C/0 not in 'foo;
assert C/0 in 'v;
assert EXIT/0 in 'foo;
assert EXIT/0 in 'v;
assert EXIT/0 in 'p;

assert v not live at START;
assert v live at B;
assert v live at C;
assert v live at EXIT;

assert p not live at START;
assert p live at B;
assert p not live at C;
assert p not live at EXIT;

